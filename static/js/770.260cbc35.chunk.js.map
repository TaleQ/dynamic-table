{"version":3,"file":"static/js/770.260cbc35.chunk.js","mappings":"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","sources":["components/SearchForm/SearchForm.jsx","components/CountriesTable/CountryDetails/CountryDetails.jsx","components/CountriesTable/CountriesTableRow/CountriesTableRow.jsx","components/CountriesTable/CountriesTable.jsx","pages/Countries/Countries.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { getCountryByName } from '../../redux/operations';\nimport { TfiSearch } from 'react-icons/tfi';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nexport const SearchForm = () => {\n  const [inputValue, setInputValue] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchQuery = inputValue.trim().toLowerCase();\n    if (!searchQuery) {\n      Notify.info('Please enter search query');\n      return;\n    }\n    dispatch(getCountryByName(inputValue));\n    setInputValue('');\n    if (pathname === '/') {\n      navigate('countries');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        autoComplete='off'\n        autoFocus\n        placeholder='Search countries by name or its part'\n        value={inputValue}\n        onChange={handleChange}\n      />\n      <button type='submit'>\n        <TfiSearch fill='#ffffff' />\n      </button>\n    </form>\n  );\n};\n","import Box from '@mui/material/Box';\nimport Collapse from '@mui/material/Collapse';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const CountryDetails = ({ isOpen, country }) => {\n  const {\n    name,\n    flags,\n    area = 'Not defined',\n    population = 'Not defined',\n    timezones,\n    currencies,\n    car,\n    maps,\n  } = country;\n\n  const isObjEmpty = (obj) => Object.keys(obj).length === 0;\n\n  return (\n    <TableRow>\n      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\n        <Collapse in={isOpen} timeout='auto' unmountOnExit>\n          <Box sx={{ margin: 1 }}>\n            <Typography variant='h6' gutterBottom component='div'>\n              Country details\n            </Typography>\n            <Table size='small' aria-label='purchases'>\n              <TableHead>\n                <TableRow>\n                  <TableCell>Flag</TableCell>\n                  <TableCell>Area&nbsp;(km2)</TableCell>\n                  <TableCell align='right'>Population</TableCell>\n                  <TableCell align='right'>Timezones</TableCell>\n                  <TableCell align='right'>Currencies</TableCell>\n                  <TableCell align='right'>Car&nbsp;signs</TableCell>\n                  <TableCell align='right'>\n                    Open&nbsp;on Google&nbsp;Maps\n                  </TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow key={`${name.common}#details`}>\n                  <TableCell component='th' scope='row'>\n                    <img\n                      src={flags?.svg ? flags.svg : ''}\n                      alt={flags?.alt ? flags.alt : 'Country flag'}\n                      width='300px'\n                      height='150px'\n                    />\n                  </TableCell>\n                  <TableCell>\n                    {area?.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}\n                  </TableCell>\n                  <TableCell align='right'>\n                    {population\n                      ?.toString()\n                      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}\n                  </TableCell>\n                  <TableCell align='right'>\n                    <ul>\n                      {timezones?.length\n                        ? timezones.map((timezone, index) => (\n                            <li key={index}>{timezone}</li>\n                          ))\n                        : 'Not defined'}\n                    </ul>\n                  </TableCell>\n                  <TableCell align='right'>\n                    <ul>\n                      {isObjEmpty(currencies)\n                        ? 'Not defined'\n                        : Object.keys(currencies).map((currency, index) => (\n                            <li key={index}>{currency}</li>\n                          ))}\n                    </ul>\n                  </TableCell>\n                  <TableCell align='right'>\n                    <ul>\n                      {car.signs?.filter((sign) => sign !== '').length\n                        ? car.signs.map((sign, index) => (\n                            <li key={index}>{sign}</li>\n                          ))\n                        : 'Not defined'}\n                    </ul>\n                  </TableCell>\n                  <TableCell>\n                    <Link\n                      to={\n                        maps?.googleMaps\n                          ? maps.googleMaps\n                          : 'https://www.google.com/maps'\n                      }\n                      target='_blank'\n                      rel='noopener noreferrer nofollow'\n                    >\n                      Open\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nCountryDetails.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  country: PropTypes.shape({\n    name: PropTypes.shape({\n      official: PropTypes.string,\n      common: PropTypes.string,\n    }),\n    flags: PropTypes.shape({\n      svg: PropTypes.string,\n      alt: PropTypes.string,\n    }),\n    area: PropTypes.number,\n    population: PropTypes.number,\n    timezones: PropTypes.arrayOf(PropTypes.string),\n    currencies: PropTypes.object,\n    car: PropTypes.shape({\n      signs: PropTypes.arrayOf(PropTypes.string),\n    }),\n    maps: PropTypes.shape({\n      googleMaps: PropTypes.string,\n    }),\n  }),\n};\n","import { useState } from 'react';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport IconButton from '@mui/material/IconButton';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useDispatch } from 'react-redux';\nimport { toggleIsDetailsShown } from '../../../redux/countriesSlice';\nimport { CountryDetails } from '../CountryDetails/CountryDetails';\nimport PropTypes from 'prop-types';\n\nexport const CountriesTableRow = ({ country, index }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const { name, cca2, capital, region, subregion, languages } = country;\n\n  const checkStringValue = (value) => {\n    if (!value) {\n      return 'Not defined';\n    } else {\n      return value;\n    }\n  };\n\n  const isObjEmpty = (obj) => Object.keys(obj).length === 0;\n\n  const onRowClick = () => {\n    dispatch(toggleIsDetailsShown(!isOpen));\n    setIsOpen(!isOpen);\n    console.log(country);\n  };\n\n  return (\n    <>\n      <TableRow\n        selected={isOpen}\n        sx={{ '& > *': { borderBottom: 'unset' } }}\n        onClick={() => onRowClick()}\n      >\n        <TableCell component='th' scope='row'>\n          {index + 1}\n        </TableCell>\n        <TableCell>{checkStringValue(name.official)}</TableCell>\n        <TableCell align='right'>{checkStringValue(name.common)}</TableCell>\n        <TableCell align='right'>{checkStringValue(cca2)}</TableCell>\n        <TableCell align='right'>\n          {capital?.length ? capital[0] : 'Not defined'}\n        </TableCell>\n        <TableCell align='right'>{checkStringValue(region)}</TableCell>\n        <TableCell align='right'>{checkStringValue(subregion)}</TableCell>\n        <TableCell align='right'>\n          {isObjEmpty(languages)\n            ? 'Not defined'\n            : Object.values(languages).join(', ')}\n        </TableCell>\n        <TableCell>\n          <IconButton aria-label='expand row' size='small'>\n            {isOpen ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n      </TableRow>\n      <CountryDetails isOpen={isOpen} country={country} />\n    </>\n  );\n};\n\nCountriesTableRow.propTypes = {\n  country: PropTypes.shape({\n    name: PropTypes.shape({\n      official: PropTypes.string,\n      common: PropTypes.string,\n    }),\n    cca2: PropTypes.string,\n    capital: PropTypes.arrayOf(PropTypes.string),\n    region: PropTypes.string,\n    subregion: PropTypes.string,\n    languages: PropTypes.objectOf(PropTypes.string),\n  }),\n  index: PropTypes.number.isRequired,\n};\n","import Table from '@mui/material/Table';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TableBody from '@mui/material/TableBody';\nimport TableRow from '@mui/material/TableRow';\nimport Paper from '@mui/material/Paper';\nimport { CountriesTableRow } from './CountriesTableRow/CountriesTableRow';\nimport { TablePagination } from '@mui/material';\nimport { useRef, useState } from 'react';\nimport { useCountries } from '../../hooks/useCountries';\n\nexport const CountriesTable = () => {\n  const { countries } = useCountries();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(10);\n  const tableRef = useRef(null);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    scrollToTop();\n  };\n\n  const scrollToTop = () => {\n    const tableElement = tableRef.current;\n    if (tableElement) {\n      tableElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const renderCountries = countries.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage\n  );\n\n  const getAbsoluteIndex = (index) => {\n    return index + page * rowsPerPage;\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table\n        sx={{ minWidth: 650 }}\n        aria-label='collapsible table'\n        ref={tableRef}\n      >\n        <TableHead>\n          <TableRow>\n            <TableCell>Number</TableCell>\n            <TableCell>Official&nbsp;name</TableCell>\n            <TableCell align='center'>Common&nbsp;name</TableCell>\n            <TableCell align='center'>Country&nbsp;Code</TableCell>\n            <TableCell align='center'>Capital</TableCell>\n            <TableCell align='center'>Region</TableCell>\n            <TableCell align='center'>Subregion</TableCell>\n            <TableCell align='center'>Languages</TableCell>\n          </TableRow>\n        </TableHead>\n        <TableBody>\n          {renderCountries?.map((country, index) => (\n            <CountriesTableRow\n              key={index}\n              country={country}\n              index={getAbsoluteIndex(index)}\n            />\n          ))}\n        </TableBody>\n      </Table>\n      <TablePagination\n        rowsPerPageOptions={[10, 20, 50, { value: -1, label: 'All' }]}\n        component='div'\n        count={countries.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </TableContainer>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getAllCountries } from '../../redux/operations';\nimport { CountriesTable } from '../../components/CountriesTable/CountriesTable';\nimport { useCountries } from '../../hooks/useCountries';\nimport { SearchForm } from '../../components/SearchForm/SearchForm';\n\nconst Countries = () => {\n  const { countries } = useCountries();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (countries.length === 0) {\n      dispatch(getAllCountries());\n    }\n  }, [dispatch, countries]);\n\n  return (\n    <>\n      <SearchForm />\n      <CountriesTable />\n    </>\n  );\n};\n\nexport default Countries;\n"],"names":["SearchForm","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","dispatch","useDispatch","navigate","useNavigate","pathname","useLocation","_jsxs","onSubmit","e","preventDefault","trim","toLowerCase","getCountryByName","Notify","info","children","_jsx","type","autoComplete","autoFocus","placeholder","value","onChange","target","TfiSearch","fill","CountryDetails","_ref","_car$signs","obj","isOpen","country","name","flags","_country$area","area","_country$population","population","timezones","currencies","car","maps","TableRow","TableCell","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","sx","margin","Typography","variant","gutterBottom","component","Table","size","TableHead","align","TableBody","scope","src","svg","alt","width","height","toString","replace","length","map","timezone","index","Object","keys","currency","signs","filter","sign","Link","to","googleMaps","rel","concat","common","CountriesTableRow","setIsOpen","cca2","capital","region","subregion","languages","checkStringValue","_Fragment","selected","borderBottom","onClick","toggleIsDetailsShown","console","log","official","values","join","IconButton","KeyboardArrowUpIcon","KeyboardArrowDownIcon","CountriesTable","countries","useCountries","page","setPage","_useState3","_useState4","rowsPerPage","setRowsPerPage","tableRef","useRef","scrollToTop","tableElement","current","scrollIntoView","behavior","block","renderCountries","slice","getAbsoluteIndex","TableContainer","Paper","minWidth","ref","TablePagination","rowsPerPageOptions","label","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","useEffect","getAllCountries"],"sourceRoot":""}
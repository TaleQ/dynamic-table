{"version":3,"file":"static/js/287.ece5ddbb.chunk.js","mappings":"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","sources":["components/CountriesTable/CountryDetails/CountryDetails.jsx","components/CountriesTable/CountriesTableRow/CountriesTableRow.jsx","components/CountriesTable/CountriesTableHead/CountriesTableHead.jsx","components/CountriesTable/CountriesTable.jsx","components/SearchForm/SearchForm.jsx","pages/Countries/Countries.jsx"],"sourcesContent":["import '../CountriesTable.scss';\nimport Box from '@mui/material/Box';\nimport Collapse from '@mui/material/Collapse';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const CountryDetails = ({ isOpen, country }) => {\n  const {\n    name,\n    flags,\n    area = 'Not defined',\n    population = 'Not defined',\n    timezones,\n    currencies,\n    car,\n    maps,\n  } = country;\n\n  const isObjEmpty = (obj) => Object.keys(obj).length === 0;\n\n  return (\n    <TableRow>\n      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={9}>\n        <Collapse in={isOpen} timeout='auto' unmountOnExit>\n          <Box sx={{ marginTop: 3, marginBottom: 3 }}>\n            <Typography variant='h6' gutterBottom component='div'>\n              Country details\n            </Typography>\n            <Table size='small' aria-label='countries'>\n              <TableHead>\n                <TableRow>\n                  <TableCell align='left'>Flag</TableCell>\n                  <TableCell align='left'>Area (km2)</TableCell>\n                  <TableCell align='left'>Population</TableCell>\n                  <TableCell align='left'>Timezones</TableCell>\n                  <TableCell align='left'>Currencies</TableCell>\n                  <TableCell align='left'>Car signs</TableCell>\n                  <TableCell align='left'>Link to Google Maps</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow key={`${name.common}#details`}>\n                  <TableCell component='th' scope='row' align='left'>\n                    <div className='flag-thumb'>\n                      <img\n                        src={flags?.png}\n                        alt={flags?.alt ? flags.alt : 'Country flag'}\n                        width='290px'\n                        height='145px'\n                      />\n                    </div>\n                  </TableCell>\n                  <TableCell align='left'>\n                    {area?.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}\n                  </TableCell>\n                  <TableCell align='left'>\n                    {population\n                      ?.toString()\n                      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}\n                  </TableCell>\n                  <TableCell align='left'>\n                    <ul>\n                      {timezones?.length\n                        ? timezones.map((timezone, index) => (\n                            <li key={index}>{timezone}</li>\n                          ))\n                        : 'Not defined'}\n                    </ul>\n                  </TableCell>\n                  <TableCell align='left'>\n                    <ul>\n                      {isObjEmpty(currencies)\n                        ? 'Not defined'\n                        : Object.keys(currencies).map((currency, index) => (\n                            <li key={index}>{currency}</li>\n                          ))}\n                    </ul>\n                  </TableCell>\n                  <TableCell align='left'>\n                    <ul>\n                      {car.signs?.filter((sign) => sign !== '').length\n                        ? car.signs.map((sign, index) => (\n                            <li key={index}>{sign}</li>\n                          ))\n                        : 'Not defined'}\n                    </ul>\n                  </TableCell>\n                  <TableCell align='left'>\n                    <Link\n                      className='maps-link'\n                      to={\n                        maps?.googleMaps\n                          ? maps.googleMaps\n                          : 'https://www.google.com/maps'\n                      }\n                      target='_blank'\n                      rel='noopener noreferrer nofollow'\n                    >\n                      Open\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nCountryDetails.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  country: PropTypes.shape({\n    name: PropTypes.shape({\n      official: PropTypes.string,\n      common: PropTypes.string,\n    }),\n    flags: PropTypes.shape({\n      svg: PropTypes.string,\n      alt: PropTypes.string,\n    }),\n    area: PropTypes.number,\n    population: PropTypes.number,\n    timezones: PropTypes.arrayOf(PropTypes.string),\n    currencies: PropTypes.object,\n    car: PropTypes.shape({\n      signs: PropTypes.arrayOf(PropTypes.string),\n    }),\n    maps: PropTypes.shape({\n      googleMaps: PropTypes.string,\n    }),\n  }),\n};\n","import { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { toggleIsDetailsShown } from '../../../redux/countriesSlice';\nimport { useCountries } from '../../../hooks/useCountries';\nimport { CountryDetails } from '../CountryDetails/CountryDetails';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport IconButton from '@mui/material/IconButton';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport PropTypes from 'prop-types';\n\nexport const CountriesTableRow = ({ country, index }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const { isDetailsShown } = useCountries();\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (!isDetailsShown) {\n      setIsOpen(false);\n    }\n  }, [isDetailsShown]);\n\n  const { name, cca2, capital, region, subregion, languages } = country;\n\n  const checkStringValue = (value) => {\n    if (!value) {\n      return 'Not defined';\n    } else {\n      return value;\n    }\n  };\n\n  const isObjEmpty = (obj) => Object.keys(obj).length === 0;\n\n  const onRowClick = () => {\n    dispatch(toggleIsDetailsShown(!isOpen));\n    setIsOpen(!isOpen);\n  };\n\n  return (\n    <>\n      <TableRow\n        selected={isOpen}\n        sx={{ '& > *': { borderBottom: 'unset' } }}\n        onClick={() => onRowClick()}\n      >\n        <TableCell component='th' scope='row' align='center'>\n          {index + 1}\n        </TableCell>\n        <TableCell align='left'>{checkStringValue(name.official)}</TableCell>\n        <TableCell align='left'>{checkStringValue(name.common)}</TableCell>\n        <TableCell align='left'>{checkStringValue(cca2)}</TableCell>\n        <TableCell align='left'>\n          {capital?.length ? capital[0] : 'Not defined'}\n        </TableCell>\n        <TableCell align='left'>{checkStringValue(region)}</TableCell>\n        <TableCell align='left'>{checkStringValue(subregion)}</TableCell>\n        <TableCell align='left'>\n          {isObjEmpty(languages)\n            ? 'Not defined'\n            : Object.values(languages).join(', ')}\n        </TableCell>\n        <TableCell>\n          <IconButton aria-label='expand row' size='small'>\n            {isOpen ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n      </TableRow>\n      <CountryDetails isOpen={isOpen} country={country} />\n    </>\n  );\n};\n\nCountriesTableRow.propTypes = {\n  country: PropTypes.shape({\n    name: PropTypes.shape({\n      official: PropTypes.string,\n      common: PropTypes.string,\n    }),\n    cca2: PropTypes.string,\n    capital: PropTypes.arrayOf(PropTypes.string),\n    region: PropTypes.string,\n    subregion: PropTypes.string,\n    languages: PropTypes.objectOf(PropTypes.string),\n  }),\n  index: PropTypes.number.isRequired,\n};\n","import '../CountriesTable.scss';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport SortByAlphaRoundedIcon from '@mui/icons-material/SortByAlpha';\nimport { useCountries } from '../../../hooks/useCountries';\nimport { useDispatch } from 'react-redux';\nimport { sortCountries } from '../../../redux/countriesSlice';\nimport { useState } from 'react';\n\nexport const CountriesTableHead = () => {\n  const { countries } = useCountries();\n  const [isAlphabetOrder, setIsAlphabetOrder] = useState(false);\n  const dispatch = useDispatch();\n\n  const onSortBtnClick = () => {\n    if (!isAlphabetOrder) {\n      const sortedCountries = [...countries].sort((a, b) =>\n        a.name.official.localeCompare(b.name.official)\n      );\n      dispatch(sortCountries(sortedCountries));\n      setIsAlphabetOrder(true);\n    } else {\n      const sortedCountries = [...countries].sort((a, b) =>\n        b.name.official.localeCompare(a.name.official)\n      );\n      dispatch(sortCountries(sortedCountries));\n      setIsAlphabetOrder(false);\n    }\n  };\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell align='left'>Number</TableCell>\n        <TableCell align='left' sx={{ minWidth: 185 }}>\n          <span>Official name</span>\n          <button className='sort-icon-btn' onClick={() => onSortBtnClick()}>\n            <SortByAlphaRoundedIcon\n              fontSize='large'\n              sx={{\n                width: '13px',\n                height: '13px',\n                fontSize: 'large',\n                color: '#212121',\n              }}\n            />\n          </button>\n        </TableCell>\n        <TableCell align='left'>Common name</TableCell>\n        <TableCell align='left'>Country code</TableCell>\n        <TableCell align='left'>Capital</TableCell>\n        <TableCell align='left'>Region</TableCell>\n        <TableCell align='left'>Subregion</TableCell>\n        <TableCell align='left'>Languages</TableCell>\n        <TableCell></TableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n","import './CountriesTable.scss';\nimport Table from '@mui/material/Table';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableBody from '@mui/material/TableBody';\nimport TablePagination from '@mui/material/TablePagination';\nimport Paper from '@mui/material/Paper';\nimport { CountriesTableRow } from './CountriesTableRow/CountriesTableRow';\nimport { useRef, useState } from 'react';\nimport { useCountries } from '../../hooks/useCountries';\nimport { CountriesTableHead } from './CountriesTableHead/CountriesTableHead';\nimport NoCountriesFound from '../../assets/images/nothing_found_img.png';\n\nexport const CountriesTable = () => {\n  const { countries } = useCountries();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(20);\n  const tableRef = useRef(null);\n\n  const handleChangePage = (_event, newPage) => {\n    setPage(newPage);\n    scrollToTop();\n  };\n\n  const scrollToTop = () => {\n    const tableElement = tableRef.current;\n    if (tableElement) {\n      tableElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const visibleCountries = countries.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage\n  );\n\n  const getAbsoluteIndex = (index) => {\n    return index + page * rowsPerPage;\n  };\n\n  return (\n    <Paper\n      sx={{\n        width: '100%',\n        backgroundColor: 'inherit',\n        boxShadow: 'none',\n        overflow: 'hidden',\n      }}\n    >\n      {visibleCountries.length ? (\n        <>\n          <TableContainer>\n            <Table aria-label='countries table' ref={tableRef}>\n              <CountriesTableHead />\n              <TableBody>\n                {visibleCountries?.map((country, index) => (\n                  <CountriesTableRow\n                    key={index}\n                    country={country}\n                    index={getAbsoluteIndex(index)}\n                    sx={{ cursor: 'pointer', minHeight: 95 }}\n                  />\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <TablePagination\n            rowsPerPageOptions={[10, 20, 50, { value: -1, label: 'All' }]}\n            component='div'\n            count={countries.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        </>\n      ) : (\n        <div className='no-countries-thumb'>\n          <p className='no-countries-text'>No countries found</p>\n          <img src={NoCountriesFound} alt='Nothing found' />\n        </div>\n      )}\n    </Paper>\n  );\n};\n","import './SearchForm.scss';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Notify } from 'notiflix';\nimport { TfiSearch } from 'react-icons/tfi';\n\nexport const SearchForm = () => {\n  const [inputValue, setInputValue] = useState('');\n  const [, setSearchParams] = useSearchParams();\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchQuery = inputValue.trim();\n    if (!searchQuery) {\n      Notify.info('Please enter a search query', { position: 'center-top' });\n      return;\n    }\n    setSearchParams({ query: searchQuery });\n  };\n\n  return (\n    <form className='search-form' onSubmit={handleSubmit}>\n      <input\n        className='form-input'\n        type='text'\n        autoComplete='off'\n        autoFocus\n        placeholder='Search countries by name or its part'\n        value={inputValue}\n        onChange={handleChange}\n      />\n      <button className='form-btn' type='submit'>\n        <TfiSearch className='form-btn__icon' fill='#14578e' />\n      </button>\n    </form>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getAllCountries, getCountryByName } from '../../redux/operations';\nimport { CountriesTable } from '../../components/CountriesTable/CountriesTable';\nimport { SearchForm } from '../../components/SearchForm/SearchForm';\n\nconst Countries = () => {\n  const dispatch = useDispatch();\n  const [searchParams] = useSearchParams();\n  const searchQuery = searchParams.get('query');\n\n  useEffect(() => {\n    if (searchQuery) {\n      dispatch(getCountryByName(searchQuery));\n    } else {\n      dispatch(getAllCountries());\n    }\n  }, [dispatch, searchQuery]);\n\n  return (\n    <>\n      <SearchForm />\n      <CountriesTable />\n    </>\n  );\n};\n\nexport default Countries;\n"],"names":["CountryDetails","_ref","_car$signs","obj","isOpen","country","name","flags","_country$area","area","_country$population","population","timezones","currencies","car","maps","_jsx","TableRow","children","TableCell","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","_jsxs","Box","sx","marginTop","marginBottom","Typography","variant","gutterBottom","component","Table","size","TableHead","align","TableBody","scope","className","src","png","alt","width","height","toString","replace","length","map","timezone","index","Object","keys","currency","signs","filter","sign","Link","to","googleMaps","target","rel","concat","common","CountriesTableRow","_useState","useState","_useState2","_slicedToArray","setIsOpen","isDetailsShown","useCountries","dispatch","useDispatch","useEffect","cca2","capital","region","subregion","languages","checkStringValue","value","_Fragment","selected","borderBottom","onClick","toggleIsDetailsShown","official","values","join","IconButton","KeyboardArrowUpIcon","KeyboardArrowDownIcon","CountriesTableHead","countries","isAlphabetOrder","setIsAlphabetOrder","minWidth","sortedCountries","_toConsumableArray","sort","a","b","localeCompare","sortCountries","onSortBtnClick","SortByAlphaRoundedIcon","fontSize","color","CountriesTable","page","setPage","_useState3","_useState4","rowsPerPage","setRowsPerPage","tableRef","useRef","scrollToTop","tableElement","current","scrollIntoView","behavior","block","visibleCountries","slice","getAbsoluteIndex","Paper","backgroundColor","boxShadow","overflow","TableContainer","ref","cursor","minHeight","TablePagination","rowsPerPageOptions","label","count","onPageChange","_event","newPage","onRowsPerPageChange","event","parseInt","NoCountriesFound","SearchForm","inputValue","setInputValue","_useSearchParams","useSearchParams","setSearchParams","onSubmit","e","preventDefault","searchQuery","trim","query","Notify","info","position","type","autoComplete","autoFocus","placeholder","onChange","TfiSearch","fill","get","getCountryByName","getAllCountries"],"sourceRoot":""}
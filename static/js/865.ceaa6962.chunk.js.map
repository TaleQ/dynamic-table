{"version":3,"file":"static/js/865.ceaa6962.chunk.js","mappings":"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","sources":["components/SearchForm/SearchForm.jsx","components/CountriesTable/CountryDetails/CountryDetails.jsx","components/CountriesTable/CountriesTableRow/CountriesTableRow.jsx","components/CountriesTable/CountriesTableHead/CountriesTableHead.jsx","components/CountriesTable/CountriesTable.jsx","pages/Countries/Countries.jsx"],"sourcesContent":["import { useState } from 'react';\nimport { Notify } from 'notiflix';\nimport { useDispatch } from 'react-redux';\nimport { getCountryByName } from '../../redux/operations';\nimport { TfiSearch } from 'react-icons/tfi';\nimport { useLocation, useNavigate } from 'react-router-dom';\n\nexport const SearchForm = () => {\n  const [inputValue, setInputValue] = useState('');\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const { pathname } = useLocation();\n\n  const handleChange = (e) => {\n    setInputValue(e.target.value);\n  };\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const searchQuery = inputValue.trim().toLowerCase();\n    if (!searchQuery) {\n      Notify.info('Please enter search query');\n      return;\n    }\n    dispatch(getCountryByName(inputValue));\n    setInputValue('');\n    if (pathname === '/') {\n      navigate('countries');\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type='text'\n        autoComplete='off'\n        autoFocus\n        placeholder='Search countries by name or its part'\n        value={inputValue}\n        onChange={handleChange}\n      />\n      <button type='submit'>\n        <TfiSearch fill='#ffffff' />\n      </button>\n    </form>\n  );\n};\n","import './CountryDetails.scss';\nimport Box from '@mui/material/Box';\nimport Collapse from '@mui/material/Collapse';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\nimport Typography from '@mui/material/Typography';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nexport const CountryDetails = ({ isOpen, country }) => {\n  const {\n    name,\n    flags,\n    area = 'Not defined',\n    population = 'Not defined',\n    timezones,\n    currencies,\n    car,\n    maps,\n  } = country;\n\n  const isObjEmpty = (obj) => Object.keys(obj).length === 0;\n\n  return (\n    <TableRow>\n      <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={9}>\n        <Collapse in={isOpen} timeout='auto' unmountOnExit>\n          <Box sx={{ marginTop: 3, marginBottom: 3 }}>\n            <Typography variant='h6' gutterBottom component='div'>\n              Country details\n            </Typography>\n            <Table size='small' aria-label='countries'>\n              <TableHead>\n                <TableRow>\n                  <TableCell align='left'>Flag</TableCell>\n                  <TableCell align='left'>Area (km2)</TableCell>\n                  <TableCell align='left'>Population</TableCell>\n                  <TableCell align='left'>Timezones</TableCell>\n                  <TableCell align='left'>Currencies</TableCell>\n                  <TableCell align='left'>Car signs</TableCell>\n                  <TableCell align='left'>Link to Google Maps</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                <TableRow key={`${name.common}#details`}>\n                  <TableCell component='th' scope='row' align='left'>\n                    <div className='flag-thumb'>\n                      <img\n                        src={flags?.svg ? flags.svg : ''}\n                        alt={flags?.alt ? flags.alt : 'Country flag'}\n                        width='290px'\n                        height='145px'\n                      />\n                    </div>\n                  </TableCell>\n                  <TableCell align='left'>\n                    {area?.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}\n                  </TableCell>\n                  <TableCell align='left'>\n                    {population\n                      ?.toString()\n                      .replace(/\\B(?=(\\d{3})+(?!\\d))/g, ' ')}\n                  </TableCell>\n                  <TableCell align='left'>\n                    <ul>\n                      {timezones?.length\n                        ? timezones.map((timezone, index) => (\n                            <li key={index}>{timezone}</li>\n                          ))\n                        : 'Not defined'}\n                    </ul>\n                  </TableCell>\n                  <TableCell align='left'>\n                    <ul>\n                      {isObjEmpty(currencies)\n                        ? 'Not defined'\n                        : Object.keys(currencies).map((currency, index) => (\n                            <li key={index}>{currency}</li>\n                          ))}\n                    </ul>\n                  </TableCell>\n                  <TableCell align='left'>\n                    <ul>\n                      {car.signs?.filter((sign) => sign !== '').length\n                        ? car.signs.map((sign, index) => (\n                            <li key={index}>{sign}</li>\n                          ))\n                        : 'Not defined'}\n                    </ul>\n                  </TableCell>\n                  <TableCell>\n                    <Link\n                      to={\n                        maps?.googleMaps\n                          ? maps.googleMaps\n                          : 'https://www.google.com/maps'\n                      }\n                      target='_blank'\n                      rel='noopener noreferrer nofollow'\n                    >\n                      Open\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              </TableBody>\n            </Table>\n          </Box>\n        </Collapse>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nCountryDetails.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  country: PropTypes.shape({\n    name: PropTypes.shape({\n      official: PropTypes.string,\n      common: PropTypes.string,\n    }),\n    flags: PropTypes.shape({\n      svg: PropTypes.string,\n      alt: PropTypes.string,\n    }),\n    area: PropTypes.number,\n    population: PropTypes.number,\n    timezones: PropTypes.arrayOf(PropTypes.string),\n    currencies: PropTypes.object,\n    car: PropTypes.shape({\n      signs: PropTypes.arrayOf(PropTypes.string),\n    }),\n    maps: PropTypes.shape({\n      googleMaps: PropTypes.string,\n    }),\n  }),\n};\n","import { useState } from 'react';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport IconButton from '@mui/material/IconButton';\nimport KeyboardArrowDownIcon from '@mui/icons-material/KeyboardArrowDown';\nimport KeyboardArrowUpIcon from '@mui/icons-material/KeyboardArrowUp';\nimport { useDispatch } from 'react-redux';\nimport { toggleIsDetailsShown } from '../../../redux/countriesSlice';\nimport { CountryDetails } from '../CountryDetails/CountryDetails';\nimport PropTypes from 'prop-types';\n\nexport const CountriesTableRow = ({ country, index }) => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n\n  const { name, cca2, capital, region, subregion, languages } = country;\n\n  const checkStringValue = (value) => {\n    if (!value) {\n      return 'Not defined';\n    } else {\n      return value;\n    }\n  };\n\n  const isObjEmpty = (obj) => Object.keys(obj).length === 0;\n\n  const onRowClick = () => {\n    dispatch(toggleIsDetailsShown(!isOpen));\n    setIsOpen(!isOpen);\n    console.log(country);\n  };\n\n  return (\n    <>\n      <TableRow\n        selected={isOpen}\n        sx={{ '& > *': { borderBottom: 'unset' } }}\n        onClick={() => onRowClick()}\n      >\n        <TableCell component='th' scope='row' align='center'>\n          {index + 1}\n        </TableCell>\n        <TableCell align='left'>{checkStringValue(name.official)}</TableCell>\n        <TableCell align='left'>{checkStringValue(name.common)}</TableCell>\n        <TableCell align='left'>{checkStringValue(cca2)}</TableCell>\n        <TableCell align='left'>\n          {capital?.length ? capital[0] : 'Not defined'}\n        </TableCell>\n        <TableCell align='left'>{checkStringValue(region)}</TableCell>\n        <TableCell align='left'>{checkStringValue(subregion)}</TableCell>\n        <TableCell align='left'>\n          {isObjEmpty(languages)\n            ? 'Not defined'\n            : Object.values(languages).join(', ')}\n        </TableCell>\n        <TableCell>\n          <IconButton aria-label='expand row' size='small'>\n            {isOpen ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\n          </IconButton>\n        </TableCell>\n      </TableRow>\n      <CountryDetails isOpen={isOpen} country={country} />\n    </>\n  );\n};\n\nCountriesTableRow.propTypes = {\n  country: PropTypes.shape({\n    name: PropTypes.shape({\n      official: PropTypes.string,\n      common: PropTypes.string,\n    }),\n    cca2: PropTypes.string,\n    capital: PropTypes.arrayOf(PropTypes.string),\n    region: PropTypes.string,\n    subregion: PropTypes.string,\n    languages: PropTypes.objectOf(PropTypes.string),\n  }),\n  index: PropTypes.number.isRequired,\n};\n","import TableCell from '@mui/material/TableCell';\nimport TableHead from '@mui/material/TableHead';\nimport TableRow from '@mui/material/TableRow';\n\nexport const CountriesTableHead = () => {\n  return (\n    <TableHead>\n      <TableRow>\n        <TableCell align='left'>Number</TableCell>\n        <TableCell align='left'>Official name</TableCell>\n        <TableCell align='left'>Common name</TableCell>\n        <TableCell align='left'>Country code</TableCell>\n        <TableCell align='left'>Capital</TableCell>\n        <TableCell align='left'>Region</TableCell>\n        <TableCell align='left'>Subregion</TableCell>\n        <TableCell align='left'>Languages</TableCell>\n        <TableCell></TableCell>\n      </TableRow>\n    </TableHead>\n  );\n};\n","import Table from '@mui/material/Table';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableRow from '@mui/material/TableRow';\nimport TablePagination from '@mui/material/TablePagination';\nimport Paper from '@mui/material/Paper';\nimport { CountriesTableRow } from './CountriesTableRow/CountriesTableRow';\nimport { useRef, useState } from 'react';\nimport { useCountries } from '../../hooks/useCountries';\nimport { CountriesTableHead } from './CountriesTableHead/CountriesTableHead';\n\nexport const CountriesTable = () => {\n  const { countries } = useCountries();\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = useState(20);\n  const tableRef = useRef(null);\n\n  const handleChangePage = (_event, newPage) => {\n    setPage(newPage);\n    scrollToTop();\n  };\n\n  const scrollToTop = () => {\n    const tableElement = tableRef.current;\n    if (tableElement) {\n      tableElement.scrollIntoView({ behavior: 'smooth', block: 'start' });\n    }\n  };\n\n  const handleChangeRowsPerPage = (event) => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const visibleCountries = countries.slice(\n    page * rowsPerPage,\n    page * rowsPerPage + rowsPerPage\n  );\n\n  const emptyRows =\n    page > 0 ? Math.max(0, (1 + page) * rowsPerPage - countries.length) : 0;\n\n  const getAbsoluteIndex = (index) => {\n    return index + page * rowsPerPage;\n  };\n\n  return (\n    <Paper\n      sx={{\n        width: '100%',\n        minWidth: 650,\n        backgroundColor: 'inherit',\n        boxShadow: 'none',\n      }}\n    >\n      <TableContainer sx={{ width: '100%', minWidth: 650 }}>\n        <Table\n          sx={{ width: '100%', minWidth: 650 }}\n          aria-label='countries table'\n          ref={tableRef}\n        >\n          <CountriesTableHead />\n          <TableBody>\n            {visibleCountries?.map((country, index) => (\n              <CountriesTableRow\n                key={index}\n                country={country}\n                index={getAbsoluteIndex(index)}\n                sx={{ cursor: 'pointer' }}\n              />\n            ))}\n            {emptyRows > 0 && (\n              <TableRow style={{ height: 53 * emptyRows }}>\n                <TableCell colSpan={9} />\n              </TableRow>\n            )}\n          </TableBody>\n        </Table>\n      </TableContainer>\n      <TablePagination\n        rowsPerPageOptions={[10, 20, 50, { value: -1, label: 'All' }]}\n        component='div'\n        count={countries.length}\n        rowsPerPage={rowsPerPage}\n        page={page}\n        onPageChange={handleChangePage}\n        onRowsPerPageChange={handleChangeRowsPerPage}\n      />\n    </Paper>\n  );\n};\n","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { getAllCountries } from '../../redux/operations';\nimport { CountriesTable } from '../../components/CountriesTable/CountriesTable';\nimport { useCountries } from '../../hooks/useCountries';\nimport { SearchForm } from '../../components/SearchForm/SearchForm';\n\nconst Countries = () => {\n  const { countries } = useCountries();\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (countries.length === 0) {\n      dispatch(getAllCountries());\n    }\n  }, [dispatch, countries]);\n\n  return (\n    <>\n      <SearchForm />\n      <CountriesTable />\n    </>\n  );\n};\n\nexport default Countries;\n"],"names":["SearchForm","_useState","useState","_useState2","_slicedToArray","inputValue","setInputValue","dispatch","useDispatch","navigate","useNavigate","pathname","useLocation","_jsxs","onSubmit","e","preventDefault","trim","toLowerCase","getCountryByName","Notify","info","children","_jsx","type","autoComplete","autoFocus","placeholder","value","onChange","target","TfiSearch","fill","CountryDetails","_ref","_car$signs","obj","isOpen","country","name","flags","_country$area","area","_country$population","population","timezones","currencies","car","maps","TableRow","TableCell","style","paddingBottom","paddingTop","colSpan","Collapse","in","timeout","unmountOnExit","Box","sx","marginTop","marginBottom","Typography","variant","gutterBottom","component","Table","size","TableHead","align","TableBody","scope","className","src","svg","alt","width","height","toString","replace","length","map","timezone","index","Object","keys","currency","signs","filter","sign","Link","to","googleMaps","rel","concat","common","CountriesTableRow","setIsOpen","cca2","capital","region","subregion","languages","checkStringValue","_Fragment","selected","borderBottom","onClick","toggleIsDetailsShown","console","log","official","values","join","IconButton","KeyboardArrowUpIcon","KeyboardArrowDownIcon","CountriesTableHead","CountriesTable","countries","useCountries","page","setPage","_useState3","_useState4","rowsPerPage","setRowsPerPage","tableRef","useRef","scrollToTop","tableElement","current","scrollIntoView","behavior","block","visibleCountries","slice","emptyRows","Math","max","getAbsoluteIndex","Paper","minWidth","backgroundColor","boxShadow","TableContainer","ref","cursor","TablePagination","rowsPerPageOptions","label","count","onPageChange","_event","newPage","onRowsPerPageChange","event","parseInt","useEffect","getAllCountries"],"sourceRoot":""}